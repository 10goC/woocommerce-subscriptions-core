<?php

class WC_Subscriptions_Payment_Gateways_Unit_Tests extends WCS_Unit_Test_Case {

	/**
	 * An internal cache of the number of times any renewal payment hook is triggered.
	 *
	 * @var array
	 */
	protected $payment_hook_counts = array();

	/**
	 * The base string of the hook triggered by @see WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook().
	 *
	 * @var string
	 */
	protected $gateway_renewal_hook_stub = 'woocommerce_scheduled_subscription_payment_';

	/**
	 * @covers WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook
	 */
	public function test_trigger_gateway_renewal_payment_hook() {
		// Attach an action hook listener to track the do_action calls.
		add_action( 'all', array( $this, 'renewal_gateway_hook_listener' ) );

		// Positive test cases
		$subscription  = WCS_Helper_Subscription::create_subscription();
		$renewal_order = WCS_Helper_Subscription::create_renewal_order( $subscription );

		$renewal_order->set_payment_method( 'dummy_gateway' );
		WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook( $renewal_order );
		$this->assertEquals( 1, $this->get_and_reset_renewal_gateway_hook_count( 'dummy_gateway' ) );

		$renewal_order->set_payment_method( 'stripe' );
		WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook( $renewal_order );
		$this->assertEquals( 1, $this->get_and_reset_renewal_gateway_hook_count( 'stripe' ) );

		$renewal_order->set_payment_method( 'paypal' );
		WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook( $renewal_order );
		$this->assertEquals( 1, $this->get_and_reset_renewal_gateway_hook_count( 'paypal' ) );

		// Negative test cases
		$renewal_order->set_total( 0 );
		WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook( $renewal_order );
		$this->assertEmpty( $this->payment_hook_counts );

		$renewal_order->set_payment_method( '' );
		$this->assertEmpty( $this->payment_hook_counts );

		WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook( false );
		$this->assertEmpty( $this->payment_hook_counts );

		remove_action( 'all', array( $this, 'renewal_gateway_hook_listener' ) );
	}

	/**
	 * Records any action which appears to be a dynamic hook generated by @see WC_Subscriptions_Payment_Gateways::trigger_gateway_renewal_payment_hook().
	 *
	 * @param mixed $value
	 * @return mixed The unchanged $value parameter in case this listener is attached to a filter.
	 */
	public function renewal_gateway_hook_listener( $value ) {
		$current_action = current_action();

		// Record any hook that looks like our payment gateway renewal hook.
		if ( substr( $current_action, 0, strlen( $this->gateway_renewal_hook_stub ) ) === $this->gateway_renewal_hook_stub ) {
			if ( isset( $this->payment_hook_counts[ $current_action ] ) ) {
				$this->payment_hook_counts[ $current_action ] += 1;
			} else {
				$this->payment_hook_counts[ $current_action ] = 1;
			}
		}

		return $value;
	}

	/**
	 * Gets a renewal payment hook count for a given payment gateway and resets the hook count.
	 * Will also reset all the counts.
	 *
	 * @param string $payment_gateway The payment gateway to look for.
	 * @return int The number of times a the specific gateway hook has run.
	 */
	protected function get_and_reset_renewal_gateway_hook_count( $payment_gateway ) {
		$hook  = "{$this->gateway_renewal_hook_stub}{$payment_gateway}";
		$count = isset( $this->payment_hook_counts[ $hook ] ) ? $this->payment_hook_counts[ $hook ] : 0;

		$this->payment_hook_counts = array();

		return $count;
	}
}
